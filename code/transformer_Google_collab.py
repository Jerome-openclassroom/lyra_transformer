# -*- coding: utf-8 -*-
"""Copie de Transformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fT3cpqQj9D4Hy7uExY-JaU3K40h4Bspd
"""

from transformers import AutoModelForSequenceClassification, AutoTokenizer, TrainingArguments, Trainer
from datasets import load_dataset

model_checkpoint = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

# Chargement d'un dataset pour test rapide
from huggingface_hub import login
login("THIS_IS_MY_KEY")  # cl√© API Hugging Face ici

dataset = load_dataset("ag_news")
train_data = dataset["train"].shuffle(seed=42).select(range(2000))
eval_data = dataset["test"].select(range(500))

# Tokenisation
def tokenize(batch):
    return tokenizer(batch["text"], truncation=True, padding="max_length", max_length=128)

train_data = train_data.map(tokenize, batched=True)
eval_data = eval_data.map(tokenize, batched=True)

# D√©claration du mod√®le
model = AutoModelForSequenceClassification.from_pretrained(model_checkpoint, num_labels=4)

# Arguments d'entra√Ænement
training_args = TrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=1,
    weight_decay=0.01,
    logging_steps=10,
    save_strategy="epoch",
    report_to="none"

)

# Entra√Æneur
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_data,
    eval_dataset=eval_data,
    tokenizer=tokenizer
)

trainer.train()



trainer.save_model("finetuned_distilbert_agnews")

import torch
text = "Tesla's CEO make much more money than ever"
inputs = tokenizer(text, return_tensors="pt", truncation=True, padding="max_length", max_length=128)

with torch.no_grad():
    output = model(**inputs)
    pred_id = torch.argmax(output.logits, dim=1).item()

label_map = {
    0: "World",
    1: "Sports",
    2: "Business",
    3: "Sci/Tech"
}

print("üß† Prediction ID:", pred_id)
print("üè∑Ô∏è Predicted label:", label_map[pred_id])

trainer.create_optimizer()
print(trainer.optimizer)
